//
// VideoAssets.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Collection of details about the video object that you can use to work with the video object. */
public struct VideoAssets: Codable, Hashable {

    /** This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming. */
    public var hls: String?
    /** Code to use video from a third party website */
    public var iframe: String?
    /** Raw url of the player. */
    public var player: String?
    /** Poster of the video. */
    public var thumbnail: String?
    /** Available only if mp4Support is enabled. Raw mp4 url. */
    public var mp4: String?

    public init(hls: String? = nil, iframe: String? = nil, player: String? = nil, thumbnail: String? = nil, mp4: String? = nil) {
        self.hls = hls
        self.iframe = iframe
        self.player = player
        self.thumbnail = thumbnail
        self.mp4 = mp4
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hls
        case iframe
        case player
        case thumbnail
        case mp4
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hls, forKey: .hls)
        try container.encodeIfPresent(iframe, forKey: .iframe)
        try container.encodeIfPresent(player, forKey: .player)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encodeIfPresent(mp4, forKey: .mp4)
    }
}

