//
// VideosAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VideosAPI {

    /**
     Upload a video
     
     - parameter videoId: (path) Enter the videoId you want to use to upload your video. 
     - parameter file: (form) The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video. 
     - parameter onProgressReady: progress handler to receive request progress.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func upload(videoId: String, file: URL, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) throws -> RequestTask {
        if (try file.isMultiChunk) {
            return try UploadChunkRequestTaskQueue(videoId: videoId, file: file, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        } else {
            return uploadWithRequestBuilder(videoId: videoId, file: file, onProgressReady: onProgressReady).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(response.body, nil)
                case let .failure(error):
                    completion(nil, error)
                }
            }
        }
    }

    /**
     * Create a progressive upload session
     *
     - returns: a progressive upload session
     */
    public class func buildProgressiveUploadSession(videoId: String) -> ProgressiveUploadSession {
        ProgressiveUploadSession(videoId: videoId)
    }
   
    public class ProgressiveUploadSession: RequestTaskQueue<Video>, ProgressiveUploadSessionProtocol {
        private var partId = 1
        
        private let videoId: String

        public init(videoId: String) {
            self.videoId = videoId
            super.init(queueLabel: videoId)
        }

        
        public func uploadPart(file: URL, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            let chunkId = partId
            partId += 1
            return uploadPart(file: file, partId: chunkId, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }
        
        public func uploadLastPart(file: URL, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            let chunkId = partId
            partId += 1
            return uploadLastPart(file: file, partId: chunkId, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }

        public func uploadPart(file: URL, partId: Int, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            uploadPart(file: file, partId: partId, isLastPart: false, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }

        public func uploadLastPart(file: URL, partId: Int, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            uploadPart(file: file, partId: partId, isLastPart: true, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }

        public func uploadPart(file: URL, partId: Int, isLastPart: Bool, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            var numOfChunks: Int? = nil
            if (isLastPart) {
                numOfChunks = partId
            }
            let requestBuilder = uploadWithRequestBuilder(videoId: videoId, file: file, chunkId: partId, numOfChunks: numOfChunks, onProgressReady: onProgressReady)
            execute(requestBuilder, apiResponseQueue: apiResponseQueue) { data, error in
                completion(data, error)
            }
            return requestBuilder.requestTask
        }
    }


    /**
     Upload a video
     - POST /videos/{videoId}/source
     - To upload a video to the videoId you created. You can only upload your video to the videoId once.



We offer 2 types of upload: 

* Regular upload 

* Progressive upload

The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to

  * allow the upload of video sources > 200 MiB (200 MiB = the max. allowed file size for regular upload)

  * allow to send a video source "progressively", i.e., before before knowing the total size of the video.

  Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as "completely sent" when the "last" chunk is sent (i.e., the chunk that "completes" the upload).


     - parameter videoId: (path) Enter the videoId you want to use to upload your video. 
     - parameter file: (form) The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video. 
     - parameter chunkId: chunk or part id. If nil, it is not add to the request.
     - parameter numOfChunks: total number of chunks or parts. If nil, it is not add to the request. In case, it is not nil, chunkId must not be nil.
     - parameter onProgressReady: progress handler to receive request progress.
     - returns: RequestBuilder<Video> 
     */
    open class func uploadWithRequestBuilder(videoId: String, file: URL, chunkId: Int? = nil, numOfChunks: Int? = nil, onProgressReady: ((Progress) -> Void)? = nil) -> RequestBuilder<Video> {
        var localVariablePath = "/videos/{videoId}/source"
        let videoIdPreEscape = "\(APIHelper.mapValueToPathItem(videoId))"
        let videoIdPostEscape = videoIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{videoId}", with: videoIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ApiVideoUploader.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file.encodeToJSON(),
        ]
        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        var localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        if let chunkId = chunkId {
            localVariableNillableHeaders["Content-Range"] = "part \(chunkId)/" + (numOfChunks != nil ? "\(numOfChunks!)" : "*")
        }

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Video>.Type = ApiVideoUploader.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, onProgressReady: onProgressReady)
    }

      /**
     Upload a video
     - POST /videos/{videoId}/source
     - To upload a video to the videoId you created. You can only upload your video to the videoId once.



We offer 2 types of upload: 

* Regular upload 

* Progressive upload

The latter allows you to split a video source into X chunks and send those chunks independently (concurrently or sequentially). The 2 main goals for our users are to

  * allow the upload of video sources > 200 MiB (200 MiB = the max. allowed file size for regular upload)

  * allow to send a video source "progressively", i.e., before before knowing the total size of the video.

  Once all chunks have been sent, they are reaggregated to one source file. The video source is considered as "completely sent" when the "last" chunk is sent (i.e., the chunk that "completes" the upload).


     - parameter videoId: (path) Enter the videoId you want to use to upload your video. 
     - parameter file: (form) The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video. 
     - parameter chunkId: chunk or part id. If nil, it is not add to the request.
     - parameter numOfChunks: total number of chunks or parts. If nil, it is not add to the request. In case, it is not nil, chunkId must not be nil.
     - parameter onProgressReady: progress handler to receive request progress.
     - returns: RequestBuilder<Video> 
     */
    open class func uploadWithRequestBuilder(videoId: String, file: FileChunkInputStream, chunkId: Int? = nil, numOfChunks: Int? = nil, onProgressReady: ((Progress) -> Void)? = nil) -> RequestBuilder<Video> {
        var localVariablePath = "/videos/{videoId}/source"
        let videoIdPreEscape = "\(APIHelper.mapValueToPathItem(videoId))"
        let videoIdPostEscape = videoIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{videoId}", with: videoIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ApiVideoUploader.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        var localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]
        if let chunkId = chunkId {
            localVariableNillableHeaders["Content-Range"] = "part \(chunkId)/" + (numOfChunks != nil ? "\(numOfChunks!)" : "*")
        }

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Video>.Type = ApiVideoUploader.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, onProgressReady: onProgressReady)
    }

    /**
     Upload with an upload token
     
     - parameter token: (query) The unique identifier for the token you want to use to upload a video. 
     - parameter file: (form) The path to the video you want to upload. 
     - parameter onProgressReady: progress handler to receive request progress.
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func uploadWithUploadToken(token: String, file: URL, videoId: String? = nil, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) throws -> RequestTask {
        if (try file.isMultiChunk) {
            return try UploadChunkRequestTaskQueue(token: token, file: file, videoId: videoId, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        } else {
            return uploadWithUploadTokenWithRequestBuilder(token: token, file: file, videoId: videoId, onProgressReady: onProgressReady).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    completion(response.body, nil)
                case let .failure(error):
                    completion(nil, error)
                }
            }
        }
    }

    /**
     * Create a progressive uploadWithUploadToken session
     *
     - returns: a progressive uploadWithUploadToken session
     */
    public class func buildProgressiveUploadWithUploadTokenSession(token: String, videoId: String? = nil) -> ProgressiveUploadWithUploadTokenSession {
        ProgressiveUploadWithUploadTokenSession(token: token)
    }
   
    public class ProgressiveUploadWithUploadTokenSession: RequestTaskQueue<Video>, ProgressiveUploadSessionProtocol {
        private var partId = 1
        private var videoId: String? = nil
        
        private let token: String

        public init(token: String, videoId: String? = nil) {
            self.token = token
            self.videoId = videoId
            super.init(queueLabel: token)
        }

        override func willExecuteRequestBuilder(requestBuilder: RequestBuilder<Video>) -> Void {
            if let videoId = videoId {
                uploadAddVideoIdParameterWithRequestBuilder(requestBuilder: requestBuilder, videoId: videoId)
            }
        }
        
        public func uploadPart(file: URL, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            let chunkId = partId
            partId += 1
            return uploadPart(file: file, partId: chunkId, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }
        
        public func uploadLastPart(file: URL, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            let chunkId = partId
            partId += 1
            return uploadLastPart(file: file, partId: chunkId, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }

        public func uploadPart(file: URL, partId: Int, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            uploadPart(file: file, partId: partId, isLastPart: false, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }

        public func uploadLastPart(file: URL, partId: Int, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            uploadPart(file: file, partId: partId, isLastPart: true, onProgressReady: onProgressReady, apiResponseQueue: apiResponseQueue, completion: completion)
        }

        public func uploadPart(file: URL, partId: Int, isLastPart: Bool, onProgressReady: ((Progress) -> Void)? = nil, apiResponseQueue: DispatchQueue = ApiVideoUploader.apiResponseQueue, completion: @escaping ((_ data: Video?, _ error: Error?) -> Void)) -> RequestTask {
            var numOfChunks: Int? = nil
            if (isLastPart) {
                numOfChunks = partId
            }
            let requestBuilder = uploadWithUploadTokenWithRequestBuilder(token: token, file: file, videoId: videoId, chunkId: partId, numOfChunks: numOfChunks, onProgressReady: onProgressReady)
            execute(requestBuilder, apiResponseQueue: apiResponseQueue) { data, error in
                if let data = data {
                    if self.videoId == nil {
                        self.videoId = data.videoId
                    }
                }
                completion(data, error)
            }
            return requestBuilder.requestTask
        }
    }
    /**
     * Add a videoId to the request builder if it does not exist already.
     - parameter requestBuilder: the request builder
     - parameter videoId: the videoId to add to the request
     */
    internal class func uploadAddVideoIdParameterWithRequestBuilder(requestBuilder: RequestBuilder<Video>, videoId: String) {
        guard let parameters = requestBuilder.parameters else {
            return
        }
        if (!parameters.keys.contains("videoId")) {
            requestBuilder.parameters!["videoId"] = videoId
        }
    }


    /**
     Upload with an upload token
     - POST /upload
     - This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you'd better use the [standard upload method](#upload).
     - parameter token: (query) The unique identifier for the token you want to use to upload a video. 
     - parameter file: (form) The path to the video you want to upload. 
     - parameter chunkId: chunk or part id. If nil, it is not add to the request.
     - parameter numOfChunks: total number of chunks or parts. If nil, it is not add to the request. In case, it is not nil, chunkId must not be nil.
     - parameter onProgressReady: progress handler to receive request progress.
     - returns: RequestBuilder<Video> 
     */
    open class func uploadWithUploadTokenWithRequestBuilder(token: String, file: URL, videoId: String? = nil, chunkId: Int? = nil, numOfChunks: Int? = nil, onProgressReady: ((Progress) -> Void)? = nil) -> RequestBuilder<Video> {
        let localVariablePath = "/upload"
        let localVariableURLString = ApiVideoUploader.basePath + localVariablePath
        var localVariableFormParams: [String: Any?] = [
            "file": file.encodeToJSON(),
        ]
        if (videoId != nil) {
            localVariableFormParams["videoId"] = videoId
        }
        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token.encodeToJSON(),
        ])

        var localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        if let chunkId = chunkId {
            localVariableNillableHeaders["Content-Range"] = "part \(chunkId)/" + (numOfChunks != nil ? "\(numOfChunks!)" : "*")
        }

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Video>.Type = ApiVideoUploader.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, onProgressReady: onProgressReady)
    }

      /**
     Upload with an upload token
     - POST /upload
     - This method allows you to send a video using an upload token. Upload tokens are especially useful when the upload is done from the client side. If you want to upload a video from your server-side application, you'd better use the [standard upload method](#upload).
     - parameter token: (query) The unique identifier for the token you want to use to upload a video. 
     - parameter file: (form) The path to the video you want to upload. 
     - parameter chunkId: chunk or part id. If nil, it is not add to the request.
     - parameter numOfChunks: total number of chunks or parts. If nil, it is not add to the request. In case, it is not nil, chunkId must not be nil.
     - parameter onProgressReady: progress handler to receive request progress.
     - returns: RequestBuilder<Video> 
     */
    open class func uploadWithUploadTokenWithRequestBuilder(token: String, file: FileChunkInputStream, videoId: String? = nil, chunkId: Int? = nil, numOfChunks: Int? = nil, onProgressReady: ((Progress) -> Void)? = nil) -> RequestBuilder<Video> {
        let localVariablePath = "/upload"
        let localVariableURLString = ApiVideoUploader.basePath + localVariablePath
        var localVariableFormParams: [String: Any?] = [
            "file": file
        ]
        if (videoId != nil) {
            localVariableFormParams["videoId"] = videoId
        }

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token.encodeToJSON(),
        ])

        var localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]
        if let chunkId = chunkId {
            localVariableNillableHeaders["Content-Range"] = "part \(chunkId)/" + (numOfChunks != nil ? "\(numOfChunks!)" : "*")
        }

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Video>.Type = ApiVideoUploader.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, onProgressReady: onProgressReady)
    }
}
